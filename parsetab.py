
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABSOLUTE AMPERSANTMOD AND APOSTROPHE ARRAY ASM ASSIGNATION BEGIN BOOLEAN CASE CHAR COLON COMMA CONST CONSTRUCTOR DEQUAL DESTRUCTOR DIV DIVIDE DO DOT DOWNTO ELSE END EQUAL EXTERNAL FILE FOR FORWARD FUNCTION GOTO GREATER GREATEREQUAL ID IF IMPLEMENTATION IN INLINE INTERFACE INTERRUPT LABEL LBLOCK LBRACKET LESS LESSEQUAL LPAREN MINUS NIL NOT NUMBER OBJECT OF OR PACKED PLUS POINTER PRIVATE PROCEDURE PROGRAM RBLOCK RBRACKET READ READLN REAL RECORD REPEAT RPAREN SEMICOLON SET SHL SHR STRING SUBRANGE TEXT THEN TIMES TO TYPE UNIT UNTIL USES VAR VIRTUAL WHILE WITH WRITE WRITELN XORprogram : PROGRAM ID SEMICOLON declaration_list blockdeclaration_list : VAR declaration_vardeclaration_var : declaration_id COLON type_specifier SEMICOLON declaration_var\n                       | declaration_id COLON type_specifier SEMICOLON\n                       | declaration_listdeclaration_list : TYPE declaration_typedeclaration_type : declaration_id EQUAL type_specifier SEMICOLON declaration_type\n                        | declaration_id EQUAL type_specifier SEMICOLON\n                        | declaration_listdeclaration_list : USES declaration_usesdeclaration_uses : declaration_id SEMICOLON declaration_uses \n                        | declaration_id SEMICOLON \n                        | declaration_listdeclaration_id : ID COMMA declaration_id \n                      | IDtype_specifier : REALtype_specifier : CHARtype_specifier : BOOLEANtype_specifier : STRINGtype_specifier : IDtype_specifier : ARRAY LBRACKET NUMBER SUBRANGE NUMBER RBRACKET OF type_specifierblock : BEGIN instance END DOTinstance : group_instance instance\n                | group_instancegroup_instance : declaration_id SEMICOLON\n                    | asignation SEMICOLON\n                    | iteration_for\n                    | iteration_while\n                    | selection_if\n                    | read_statement\n                    | write_statementasignation : ID ASSIGNATION expressionexpression : ID \n                | NUMBER\n                | ID LBRACKET ID RBRACKET\n                | ID LBRACKET NUMBER RBRACKETiteration_for : FOR expression TO expression DO BEGIN instance END SEMICOLON\n                   | FOR asignation TO expression DO BEGIN instance END SEMICOLONiteration_while : WHILE LPAREN expression_comparison RPAREN DO BEGIN instance END SEMICOLONexpression_comparison : expression comparison expressioncomparison : EQUAL\n                | LESS\n                | LESSEQUAL\n                | GREATER\n                | GREATEREQUAL\n                | DEQUALselection_if : IF LPAREN expression_comparison RPAREN THEN BEGIN instance END SEMICOLON\n                 | IF LPAREN expression_comparison RPAREN THEN instance\n                 | IF LPAREN expression_comparison RPAREN THEN BEGIN instance END SEMICOLON ELSE instance\n                 | IF LPAREN expression_comparison RPAREN THEN instance ELSE instance\n                 | IF LPAREN expression_comparison RPAREN THEN BEGIN instance END SEMICOLON ELSE BEGIN instance END SEMICOLON\n                 | IF LPAREN expression_comparison RPAREN THEN instance ELSE BEGIN instance END SEMICOLONread_statement : READ LPAREN expression RPAREN SEMICOLON\n                    | READLN LPAREN expression RPAREN SEMICOLONwrite_statement : WRITE LPAREN type_out RPAREN SEMICOLON\n                     | WRITELN LPAREN type_out RPAREN SEMICOLONtype_out : ID\n                | ID COMMA type_out\n                | TEXT\n                | TEXT COMMA type_out\n                | ID LBRACKET ID RBRACKET\n                | ID LBRACKET ID RBRACKET COMMA type_out'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,9,67,],[0,-1,-22,]),'ID':([2,6,7,8,10,22,25,26,27,28,29,31,38,39,40,41,43,44,45,46,51,52,53,54,55,56,70,71,72,82,84,90,91,92,93,94,95,96,101,102,103,114,115,116,117,121,123,124,125,126,127,134,135,141,142,144,145,146,147,148,151,153,154,155,158,],[3,14,14,14,30,30,-27,-28,-29,-30,-31,49,62,14,62,14,-23,-25,-26,68,68,68,68,68,79,79,68,68,87,14,14,68,-41,-42,-43,-44,-45,-46,79,119,79,30,-53,-54,-55,-56,30,30,30,30,-48,30,79,-50,30,62,-37,-38,-39,-47,30,30,-49,-52,-51,]),'SEMICOLON':([3,14,19,23,24,30,50,57,58,59,60,61,62,64,65,68,69,98,99,100,104,110,111,137,138,139,140,150,152,157,],[4,-15,41,44,45,-15,-34,82,-16,-17,-18,-19,-20,-14,84,-33,-32,115,116,117,121,-35,-36,145,146,147,148,-21,155,158,]),'VAR':([4,6,7,8,41,82,84,],[6,6,6,6,6,6,6,]),'TYPE':([4,6,7,8,41,82,84,],[7,7,7,7,7,7,7,]),'USES':([4,6,7,8,41,82,84,],[8,8,8,8,8,8,8,]),'BEGIN':([5,11,13,15,17,18,20,41,66,82,84,105,107,108,109,112,114,134,151,],[10,-2,-5,-6,-9,-10,-13,-12,-11,-4,-8,-3,-7,123,124,125,126,142,153,]),'FOR':([10,22,25,26,27,28,29,43,44,45,114,115,116,117,121,123,124,125,126,127,134,141,142,145,146,147,148,151,153,154,155,158,],[31,31,-27,-28,-29,-30,-31,-23,-25,-26,31,-53,-54,-55,-56,31,31,31,31,-48,31,-50,31,-37,-38,-39,-47,31,31,-49,-52,-51,]),'WHILE':([10,22,25,26,27,28,29,43,44,45,114,115,116,117,121,123,124,125,126,127,134,141,142,145,146,147,148,151,153,154,155,158,],[32,32,-27,-28,-29,-30,-31,-23,-25,-26,32,-53,-54,-55,-56,32,32,32,32,-48,32,-50,32,-37,-38,-39,-47,32,32,-49,-52,-51,]),'IF':([10,22,25,26,27,28,29,43,44,45,114,115,116,117,121,123,124,125,126,127,134,141,142,145,146,147,148,151,153,154,155,158,],[33,33,-27,-28,-29,-30,-31,-23,-25,-26,33,-53,-54,-55,-56,33,33,33,33,-48,33,-50,33,-37,-38,-39,-47,33,33,-49,-52,-51,]),'READ':([10,22,25,26,27,28,29,43,44,45,114,115,116,117,121,123,124,125,126,127,134,141,142,145,146,147,148,151,153,154,155,158,],[34,34,-27,-28,-29,-30,-31,-23,-25,-26,34,-53,-54,-55,-56,34,34,34,34,-48,34,-50,34,-37,-38,-39,-47,34,34,-49,-52,-51,]),'READLN':([10,22,25,26,27,28,29,43,44,45,114,115,116,117,121,123,124,125,126,127,134,141,142,145,146,147,148,151,153,154,155,158,],[35,35,-27,-28,-29,-30,-31,-23,-25,-26,35,-53,-54,-55,-56,35,35,35,35,-48,35,-50,35,-37,-38,-39,-47,35,35,-49,-52,-51,]),'WRITE':([10,22,25,26,27,28,29,43,44,45,114,115,116,117,121,123,124,125,126,127,134,141,142,145,146,147,148,151,153,154,155,158,],[36,36,-27,-28,-29,-30,-31,-23,-25,-26,36,-53,-54,-55,-56,36,36,36,36,-48,36,-50,36,-37,-38,-39,-47,36,36,-49,-52,-51,]),'WRITELN':([10,22,25,26,27,28,29,43,44,45,114,115,116,117,121,123,124,125,126,127,134,141,142,145,146,147,148,151,153,154,155,158,],[37,37,-27,-28,-29,-30,-31,-23,-25,-26,37,-53,-54,-55,-56,37,37,37,37,-48,37,-50,37,-37,-38,-39,-47,37,37,-49,-52,-51,]),'COLON':([12,14,64,],[38,-15,-14,]),'COMMA':([14,30,79,80,128,],[39,39,101,103,135,]),'EQUAL':([14,16,50,64,68,74,110,111,],[-15,40,-34,-14,-33,91,-35,-36,]),'END':([21,22,25,26,27,28,29,43,44,45,115,116,117,121,127,130,131,132,133,141,145,146,147,148,149,154,155,156,158,],[42,-24,-27,-28,-29,-30,-31,-23,-25,-26,-53,-54,-55,-56,-48,137,138,139,140,-50,-37,-38,-39,-47,152,-49,-52,157,-51,]),'ELSE':([22,25,26,27,28,29,43,44,45,115,116,117,121,127,141,145,146,147,148,154,155,158,],[-24,-27,-28,-29,-30,-31,-23,-25,-26,-53,-54,-55,-56,134,-50,-37,-38,-39,151,-49,-52,-51,]),'ASSIGNATION':([30,49,],[46,46,]),'NUMBER':([31,46,51,52,53,54,70,71,72,83,90,91,92,93,94,95,96,122,],[50,50,50,50,50,50,50,50,88,106,50,-41,-42,-43,-44,-45,-46,129,]),'LPAREN':([32,33,34,35,36,37,],[51,52,53,54,55,56,]),'REAL':([38,40,144,],[58,58,58,]),'CHAR':([38,40,144,],[59,59,59,]),'BOOLEAN':([38,40,144,],[60,60,60,]),'STRING':([38,40,144,],[61,61,61,]),'ARRAY':([38,40,144,],[63,63,63,]),'DOT':([42,],[67,]),'TO':([47,48,49,50,68,69,110,111,],[70,71,-33,-34,-33,-32,-35,-36,]),'LBRACKET':([49,63,68,79,],[72,83,72,102,]),'LESS':([50,68,74,110,111,],[-34,-33,92,-35,-36,]),'LESSEQUAL':([50,68,74,110,111,],[-34,-33,93,-35,-36,]),'GREATER':([50,68,74,110,111,],[-34,-33,94,-35,-36,]),'GREATEREQUAL':([50,68,74,110,111,],[-34,-33,95,-35,-36,]),'DEQUAL':([50,68,74,110,111,],[-34,-33,96,-35,-36,]),'RPAREN':([50,68,73,75,76,77,78,79,80,81,110,111,113,118,120,128,143,],[-34,-33,89,97,98,99,100,-57,-59,104,-35,-36,-40,-58,-60,-61,-62,]),'DO':([50,68,85,86,89,110,111,],[-34,-33,108,109,112,-35,-36,]),'TEXT':([55,56,101,103,135,],[80,80,80,80,80,]),'RBRACKET':([87,88,119,129,],[110,111,128,136,]),'THEN':([97,],[114,]),'SUBRANGE':([106,],[122,]),'OF':([136,],[144,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declaration_list':([4,6,7,8,41,82,84,],[5,13,17,20,20,13,17,]),'block':([5,],[9,]),'declaration_var':([6,82,],[11,105,]),'declaration_id':([6,7,8,10,22,39,41,82,84,114,123,124,125,126,134,142,151,153,],[12,16,19,23,23,64,19,12,16,23,23,23,23,23,23,23,23,23,]),'declaration_type':([7,84,],[15,107,]),'declaration_uses':([8,41,],[18,66,]),'instance':([10,22,114,123,124,125,126,134,142,151,153,],[21,43,127,130,131,132,133,141,149,154,156,]),'group_instance':([10,22,114,123,124,125,126,134,142,151,153,],[22,22,22,22,22,22,22,22,22,22,22,]),'asignation':([10,22,31,114,123,124,125,126,134,142,151,153,],[24,24,48,24,24,24,24,24,24,24,24,24,]),'iteration_for':([10,22,114,123,124,125,126,134,142,151,153,],[25,25,25,25,25,25,25,25,25,25,25,]),'iteration_while':([10,22,114,123,124,125,126,134,142,151,153,],[26,26,26,26,26,26,26,26,26,26,26,]),'selection_if':([10,22,114,123,124,125,126,134,142,151,153,],[27,27,27,27,27,27,27,27,27,27,27,]),'read_statement':([10,22,114,123,124,125,126,134,142,151,153,],[28,28,28,28,28,28,28,28,28,28,28,]),'write_statement':([10,22,114,123,124,125,126,134,142,151,153,],[29,29,29,29,29,29,29,29,29,29,29,]),'expression':([31,46,51,52,53,54,70,71,90,],[47,69,74,74,76,77,85,86,113,]),'type_specifier':([38,40,144,],[57,65,150,]),'expression_comparison':([51,52,],[73,75,]),'type_out':([55,56,101,103,135,],[78,81,118,120,143,]),'comparison':([74,],[90,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON declaration_list block','program',5,'p_program','mini_parser_pascal.py',17),
  ('declaration_list -> VAR declaration_var','declaration_list',2,'p_declaration_list_var','mini_parser_pascal.py',21),
  ('declaration_var -> declaration_id COLON type_specifier SEMICOLON declaration_var','declaration_var',5,'p_declaration_var','mini_parser_pascal.py',25),
  ('declaration_var -> declaration_id COLON type_specifier SEMICOLON','declaration_var',4,'p_declaration_var','mini_parser_pascal.py',26),
  ('declaration_var -> declaration_list','declaration_var',1,'p_declaration_var','mini_parser_pascal.py',27),
  ('declaration_list -> TYPE declaration_type','declaration_list',2,'p_declaration_list_type','mini_parser_pascal.py',31),
  ('declaration_type -> declaration_id EQUAL type_specifier SEMICOLON declaration_type','declaration_type',5,'p_declaration_type','mini_parser_pascal.py',35),
  ('declaration_type -> declaration_id EQUAL type_specifier SEMICOLON','declaration_type',4,'p_declaration_type','mini_parser_pascal.py',36),
  ('declaration_type -> declaration_list','declaration_type',1,'p_declaration_type','mini_parser_pascal.py',37),
  ('declaration_list -> USES declaration_uses','declaration_list',2,'p_declaration_list_uses','mini_parser_pascal.py',41),
  ('declaration_uses -> declaration_id SEMICOLON declaration_uses','declaration_uses',3,'p_declaration_uses','mini_parser_pascal.py',45),
  ('declaration_uses -> declaration_id SEMICOLON','declaration_uses',2,'p_declaration_uses','mini_parser_pascal.py',46),
  ('declaration_uses -> declaration_list','declaration_uses',1,'p_declaration_uses','mini_parser_pascal.py',47),
  ('declaration_id -> ID COMMA declaration_id','declaration_id',3,'p_declaration_id','mini_parser_pascal.py',53),
  ('declaration_id -> ID','declaration_id',1,'p_declaration_id','mini_parser_pascal.py',54),
  ('type_specifier -> REAL','type_specifier',1,'p_type_specifier_1','mini_parser_pascal.py',60),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier_2','mini_parser_pascal.py',64),
  ('type_specifier -> BOOLEAN','type_specifier',1,'p_type_specifier_3','mini_parser_pascal.py',68),
  ('type_specifier -> STRING','type_specifier',1,'p_type_specifier_4','mini_parser_pascal.py',72),
  ('type_specifier -> ID','type_specifier',1,'p_type_specifier_5','mini_parser_pascal.py',76),
  ('type_specifier -> ARRAY LBRACKET NUMBER SUBRANGE NUMBER RBRACKET OF type_specifier','type_specifier',8,'p_type_array','mini_parser_pascal.py',80),
  ('block -> BEGIN instance END DOT','block',4,'p_block','mini_parser_pascal.py',85),
  ('instance -> group_instance instance','instance',2,'p_instance','mini_parser_pascal.py',89),
  ('instance -> group_instance','instance',1,'p_instance','mini_parser_pascal.py',90),
  ('group_instance -> declaration_id SEMICOLON','group_instance',2,'p_group_instance','mini_parser_pascal.py',94),
  ('group_instance -> asignation SEMICOLON','group_instance',2,'p_group_instance','mini_parser_pascal.py',95),
  ('group_instance -> iteration_for','group_instance',1,'p_group_instance','mini_parser_pascal.py',96),
  ('group_instance -> iteration_while','group_instance',1,'p_group_instance','mini_parser_pascal.py',97),
  ('group_instance -> selection_if','group_instance',1,'p_group_instance','mini_parser_pascal.py',98),
  ('group_instance -> read_statement','group_instance',1,'p_group_instance','mini_parser_pascal.py',99),
  ('group_instance -> write_statement','group_instance',1,'p_group_instance','mini_parser_pascal.py',100),
  ('asignation -> ID ASSIGNATION expression','asignation',3,'p_asignation','mini_parser_pascal.py',104),
  ('expression -> ID','expression',1,'p_expression','mini_parser_pascal.py',108),
  ('expression -> NUMBER','expression',1,'p_expression','mini_parser_pascal.py',109),
  ('expression -> ID LBRACKET ID RBRACKET','expression',4,'p_expression','mini_parser_pascal.py',110),
  ('expression -> ID LBRACKET NUMBER RBRACKET','expression',4,'p_expression','mini_parser_pascal.py',111),
  ('iteration_for -> FOR expression TO expression DO BEGIN instance END SEMICOLON','iteration_for',9,'p_iteration_for','mini_parser_pascal.py',115),
  ('iteration_for -> FOR asignation TO expression DO BEGIN instance END SEMICOLON','iteration_for',9,'p_iteration_for','mini_parser_pascal.py',116),
  ('iteration_while -> WHILE LPAREN expression_comparison RPAREN DO BEGIN instance END SEMICOLON','iteration_while',9,'p_iteration_while','mini_parser_pascal.py',120),
  ('expression_comparison -> expression comparison expression','expression_comparison',3,'p_expression_comparison','mini_parser_pascal.py',124),
  ('comparison -> EQUAL','comparison',1,'p_comparison','mini_parser_pascal.py',128),
  ('comparison -> LESS','comparison',1,'p_comparison','mini_parser_pascal.py',129),
  ('comparison -> LESSEQUAL','comparison',1,'p_comparison','mini_parser_pascal.py',130),
  ('comparison -> GREATER','comparison',1,'p_comparison','mini_parser_pascal.py',131),
  ('comparison -> GREATEREQUAL','comparison',1,'p_comparison','mini_parser_pascal.py',132),
  ('comparison -> DEQUAL','comparison',1,'p_comparison','mini_parser_pascal.py',133),
  ('selection_if -> IF LPAREN expression_comparison RPAREN THEN BEGIN instance END SEMICOLON','selection_if',9,'p_seleccion_if','mini_parser_pascal.py',137),
  ('selection_if -> IF LPAREN expression_comparison RPAREN THEN instance','selection_if',6,'p_seleccion_if','mini_parser_pascal.py',138),
  ('selection_if -> IF LPAREN expression_comparison RPAREN THEN BEGIN instance END SEMICOLON ELSE instance','selection_if',11,'p_seleccion_if','mini_parser_pascal.py',139),
  ('selection_if -> IF LPAREN expression_comparison RPAREN THEN instance ELSE instance','selection_if',8,'p_seleccion_if','mini_parser_pascal.py',140),
  ('selection_if -> IF LPAREN expression_comparison RPAREN THEN BEGIN instance END SEMICOLON ELSE BEGIN instance END SEMICOLON','selection_if',14,'p_seleccion_if','mini_parser_pascal.py',141),
  ('selection_if -> IF LPAREN expression_comparison RPAREN THEN instance ELSE BEGIN instance END SEMICOLON','selection_if',11,'p_seleccion_if','mini_parser_pascal.py',142),
  ('read_statement -> READ LPAREN expression RPAREN SEMICOLON','read_statement',5,'p_read_statement','mini_parser_pascal.py',146),
  ('read_statement -> READLN LPAREN expression RPAREN SEMICOLON','read_statement',5,'p_read_statement','mini_parser_pascal.py',147),
  ('write_statement -> WRITE LPAREN type_out RPAREN SEMICOLON','write_statement',5,'p_write_statement','mini_parser_pascal.py',151),
  ('write_statement -> WRITELN LPAREN type_out RPAREN SEMICOLON','write_statement',5,'p_write_statement','mini_parser_pascal.py',152),
  ('type_out -> ID','type_out',1,'p_type_out','mini_parser_pascal.py',156),
  ('type_out -> ID COMMA type_out','type_out',3,'p_type_out','mini_parser_pascal.py',157),
  ('type_out -> TEXT','type_out',1,'p_type_out','mini_parser_pascal.py',158),
  ('type_out -> TEXT COMMA type_out','type_out',3,'p_type_out','mini_parser_pascal.py',159),
  ('type_out -> ID LBRACKET ID RBRACKET','type_out',4,'p_type_out','mini_parser_pascal.py',160),
  ('type_out -> ID LBRACKET ID RBRACKET COMMA type_out','type_out',6,'p_type_out','mini_parser_pascal.py',161),
]
